```js
// App.js
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, TouchableOpacity, FlatList, Alert } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';
import AsyncStorage from '@react-native-async-storage/async-storage';

const App = () => {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);
  const [qrCodes, setQrCodes] = useState([]);
  const [scanning, setScanning] = useState(false);

  useEffect(() => {
    (async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
    loadQrCodes();
  }, []);

  const loadQrCodes = async () => {
    try {
      const storedQrCodes = await AsyncStorage.getItem('qrCodes');
      if (storedQrCodes !== null) {
        setQrCodes(JSON.parse(storedQrCodes));
      }
    } catch (error) {
      console.error('Error loading QR codes:', error);
    }
  };

  const saveQrCodes = async (newQrCodes) => {
    try {
      await AsyncStorage.setItem('qrCodes', JSON.stringify(newQrCodes));
    } catch (error) {
      console.error('Error saving QR codes:', error);
    }
  };

  const handleBarCodeScanned = ({ type, data }) => {
    setScanned(true);
    setScanning(false);
    const newQrCodes = [...qrCodes, { id: Date.now().toString(), data }];
    setQrCodes(newQrCodes);
    saveQrCodes(newQrCodes);
    Alert.alert('QR Code Scanned', `QR code with data ${data} has been added to your collection.`);
  };

  const startScanning = () => {
    setScanning(true);
    setScanned(false);
  };

  const renderQrCode = ({ item }) => (
    <View style={styles.qrCodeItem}>
      <Text style={styles.qrCodeText}>{item.data}</Text>
    </View>
  );

  if (hasPermission === null) {
    return <Text>Requesting for camera permission</Text>;
  }
  if (hasPermission === false) {
    return <Text>No access to camera</Text>;
  }

  return (
    <View style={styles.container}>
      {scanning ? (
        <View style={styles.scannerContainer}>
          <BarCodeScanner
            onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
            style={StyleSheet.absoluteFillObject}
          />
          <TouchableOpacity style={styles.cancelButton} onPress={() => setScanning(false)}>
            <Text style={styles.buttonText}>Cancel</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <>
          <Text style={styles.title}>QR Code Collection</Text>
          <FlatList
            data={qrCodes}
            renderItem={renderQrCode}
            keyExtractor={(item) => item.id}
            style={styles.list}
          />
          <TouchableOpacity style={styles.scanButton} onPress={startScanning}>
            <Text style={styles.buttonText}>Scan QR Code</Text>
          </TouchableOpacity>
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f0f0',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 50,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  scannerContainer: {
    flex: 1,
    width: '100%',
  },
  list: {
    width: '100%',
    paddingHorizontal: 20,
  },
  qrCodeItem: {
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 10,
    marginBottom: 10,
  },
  qrCodeText: {
    fontSize: 16,
  },
  scanButton: {
    backgroundColor: '#007AFF',
    padding: 15,
    borderRadius: 10,
    marginTop: 20,
    marginBottom: 30,
  },
  cancelButton: {
    backgroundColor: 'red',
    padding: 15,
    borderRadius: 10,
    position: 'absolute',
    bottom: 30,
    alignSelf: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
});

export default App;
// End of App.js
```